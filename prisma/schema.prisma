generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//Modeling database
model User {
  id                     Int           @id @default(autoincrement())
  username               String        @unique @db.VarChar(255)
  password               String        @db.VarChar(255)
  description            String?
  image                  String?
  jobs                   Jobs[] //in controller, fetch all jobs that contain userID and save it here. Prev: Job[] OR Int[]
  //itineraries            Int[] //in controller, fetch all itineraries that contain userID and dont need save ehre
  //favourited_itineraries UserOnItineraries[]
  //favourited_jobs        Int[]
  favourited_itineraries Int[] //Instead of line 20, in frontend when user click favourite, post itinerary id to here and save
  user_comments          Comments[]
  rating                 Rating[]
  proposal_itineraries   Itineraries[]
  //UserOnItineraries      UserOnItineraries[] line 20
}

model Jobs {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    Int
  destination String
  num_days    String
  job_title   String
  job_body    String
  pay         String
  itinerary   Itineraries[] //which itinerary has been submitted for this job
  comments    Comments[]
}

model Itineraries {
  id              Int        @id @default(autoincrement())
  created_at      DateTime   @default(now()) @db.Timestamp(6)
  author          User       @relation(fields: [authorId], references: [id])
  authorId        Int
  destination     String
  num_days        String
  itinerary_title String
  itinerary_body  String
  image           String?
  rating          Rating[]
  comments        Comments[]
  // favourited_user UserOnItineraries[] see line 20
  job             Jobs?      @relation(fields: [jobsId], references: [id]) //optional because it could be a itinerary without any job
  jobsId          Int?
  isprivate       Boolean //when you click "do itinerary" on job post, the itinerary submitted will be private
}

// model UserOnItineraries {
//   User          User        @relation(fields: [userId], references: [id])
//   userId        Int
//   Itineraries   Itineraries @relation(fields: [itinerariesId], references: [id])
//   itinerariesId Int

//   @@id([userId, itinerariesId])
// }

model Rating {
  id            Int         @id @default(autoincrement())
  author        User        @relation(fields: [userId], references: [id])
  userId        Int
  Itineraries   Itineraries @relation(fields: [itinerariesId], references: [id])
  itinerariesId Int
}

model Comments {
  id          Int          @id @default(autoincrement())
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  author      User         @relation(fields: [userId], references: [id])
  userId      Int
  body        String
  itinerary   Itineraries? @relation(fields: [itineraryId], references: [id])
  itineraryId Int?
  Jobs        Jobs?        @relation(fields: [jobsId], references: [id])
  jobsId      Int?
}
